// Compiler.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
//#define _CRT_SECURE_NO_WARNINGS
//#pragma warning(disable:4819)
#include "Globalvar.h"
#include "Lexical.h"
#include "Syntax.h"
#include "Opt_midcode.h"
#include "Opt_target.h"
#include "output_midcode.h"

void read_test_file() {
	char ch;
	while ((ch = getchar()) != EOF)
	{
		if (ch == '\n') {
			code_all[code_all_len++] = '\r';
		}
		code_all[code_all_len++] = ch;
	}
	code_all[code_all_len] = '\0';
}


int main()
{					
	//语法分析输出标志位 print
	//中间代码输出标志位 print_midcode
	freopen("testfile.txt", "r", stdin);
	freopen("mips.txt", "w", stdout);
	//print_midcode = 1;
	//freopen("inline.txt", "r", stdin);
	//freopen("inline_mid.txt", "w", stdout);
	read_test_file();
	Syntax::syntax();
	//fclose(stdout);

	//freopen("inline_opt_mid.txt", "w", stdout);
	opt_mid::opt_midcode();												//优化版本1
	//output_all_opt1_midcode();
	//fclose(stdout);

	//freopen("./test_output/target.txt", "w", stdout);
	//Target::get_target_code();												//正常版本1
	//Target::output_target();												//正常版本2
	//fclose(stdout);

	//freopen("./wlt_test/inline/inline_opt_target.txt", "w", stdout);
	Opt_Target::get_opt_target();											//优化版本2
	Opt_Target::output_opt_target();										//优化版本3
	
	fclose(stdin);
	fclose(stdout);
	return 0;
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件

/*
<程序>				::= <常量说明><变量说明><函数说明>
	<常量说明>		::= {const<常量定义>;}
		<常量定义> 	::= int<标识符>=<整数>{,<标识符>=<整数>}|char<标识符>=<字符>{,<标识符>=<字符>}
	<变量说明>		::= {<类型标识符><变量定义>;}
		<变量定义> 	::= <标识符>[<下标>]{,<标识符>[<下标>]}
			<下标>	::= '['<无符号整数>']' // <无符号整数>表示数组元素的个数，其值需大于0
	<函数说明>		::= {(<类型标识符>|void)<函数定义>}void<主函数>
		<函数定义>	::= <标识符>'('<参数表>')'<复合语句>
			<参数表>	::= [<类型标识符><标识符>{,<类型标识符><标识符>}]
		<主函数>		::= main'('')'<复合语句>

<复合语句>			::= '{'<常量说明><变量说明>{<语句>}'}'
<语句>				::= <条件语句>|<循环语句>|'{'{<语句>}'}'|<函数调用语句>;
								|<赋值语句>;|<读语句>;|<写语句>;|<返回语句>;|;
	<条件语句>		::= if'('<条件>')'<语句>[else<语句>]
	<循环语句>		::= while'('<条件>')'<语句>|do<语句>while'('<条件>')'
								|for'('<标识符>=<表达式>;<条件>;<标识符>=<标识符><加法运算符><无符号整数>')'<语句>
		<条件>		::= <表达式>[<关系运算符><表达式>] // 表达式为0条件为假，否则为真
	<函数调用语句>	::= <标识符>'('[<表达式>{,<表达式>}]')'
	<赋值语句>		::= <标识符>['['<表达式>']']=<表达式>
	<读语句>			::= scanf'('<标识符>{,<标识符>}')'
	<写语句>			::= printf'('<字符串>[,<表达式>]')'|printf'('<表达式>')' 
	<返回语句>		::= return['('<表达式>')']

<表达式>				::= [<加法运算符>]<项>{<加法运算符><项>} // [+|-]只作用于第一个<项>
<项>				::= <因子>{<乘法运算符><因子>}
<因子>				::= <标识符>['['<表达式>']']|'('<表达式>')'|<整数>|<字符>|<函数调用语句>
<整数>				::= [<加法运算符>]<无符号整数>

<标识符>		::= <字母>{<字母>|<数字>}
<无符号整数> 	::= <非零数字>{<数字>}|0
	<数字>		::= 0|<非零数字>
	<非零数字>	::= 1|...|９
<字符>		::= '<加法运算符>'|'<乘法运算符>'|'<字母>'|'<数字>'
<字符串>		::= "{十进制编码为32,33,35-126的ASCII字符}"
<类型标识符> 	::= int|char
<加法运算符>	::= +|-
<乘法运算符> 	::= *|/
<关系运算符> 	::= <|<=|>|>=|!=|==
<字母>		::= _|a|...|z|A|...|Z
 */

/*
＜加法运算符＞ ::= +｜-
＜乘法运算符＞  ::= *｜/
＜关系运算符＞  ::=  <｜<=｜>｜>=｜!=｜==
＜字母＞   ::= ＿｜a｜．．．｜z｜A｜．．．｜Z
＜数字＞   ::= ０｜＜非零数字＞
＜非零数字＞  ::= １｜．．．｜９
＜字符＞    ::=  '＜加法运算符＞'｜'＜乘法运算符＞'｜'＜字母＞'｜'＜数字＞'
＜字符串＞   ::=  "｛十进制编码为32,33,35-126的ASCII字符｝"
＜程序＞    ::= ［＜常量说明＞］［＜变量说明＞］{＜有返回值函数定义＞|＜无返回值函数定义＞}＜主函数＞
＜常量说明＞ ::=  const＜常量定义＞;{ const＜常量定义＞;}
＜常量定义＞   ::=   int＜标识符＞＝＜整数＞{,＜标识符＞＝＜整数＞}
                  | char＜标识符＞＝＜字符＞{,＜标识符＞＝＜字符＞}
＜无符号整数＞  ::= ＜非零数字＞｛＜数字＞｝| 0
＜整数＞        ::= ［＋｜－］＜无符号整数＞
＜标识符＞    ::=  ＜字母＞｛＜字母＞｜＜数字＞｝
＜声明头部＞   ::=  int＜标识符＞ |char＜标识符＞
＜变量说明＞  ::= ＜变量定义＞;{＜变量定义＞;}
＜变量定义＞  ::= ＜类型标识符＞(＜标识符＞|＜标识符＞'['＜无符号整数＞']'){,(＜标识符＞|＜标识符＞'['＜无符号整数＞']' )} 
                 //＜无符号整数＞表示数组元素的个数，其值需大于0
＜类型标识符＞      ::=  int | char
＜有返回值函数定义＞  ::=  ＜声明头部＞'('＜参数表＞')' '{'＜复合语句＞'}'
＜无返回值函数定义＞  ::= void＜标识符＞'('＜参数表＞')''{'＜复合语句＞'}'
＜复合语句＞   ::=  ［＜常量说明＞］［＜变量说明＞］＜语句列＞
＜参数表＞    ::=  ＜类型标识符＞＜标识符＞{,＜类型标识符＞＜标识符＞}| ＜空＞
＜主函数＞    ::= void main‘(’‘)’ ‘{’＜复合语句＞‘}’
＜表达式＞    ::= ［＋｜－］＜项＞{＜加法运算符＞＜项＞}   //[+|-]只作用于第一个<项>
＜项＞     ::= ＜因子＞{＜乘法运算符＞＜因子＞}
＜因子＞    ::= ＜标识符＞｜＜标识符＞'['＜表达式＞']'|'('＜表达式＞')'｜＜整数＞|＜字符＞｜＜有返回值函数调用语句＞         
＜语句＞    ::= ＜条件语句＞｜＜循环语句＞| '{'＜语句列＞'}'| ＜有返回值函数调用语句＞; 
                           |＜无返回值函数调用语句＞;｜＜赋值语句＞;｜＜读语句＞;｜＜写语句＞;｜＜空＞;|＜返回语句＞;
＜赋值语句＞   ::=  ＜标识符＞＝＜表达式＞|＜标识符＞'['＜表达式＞']'=＜表达式＞
＜条件语句＞  ::= if '('＜条件＞')'＜语句＞［else＜语句＞］
＜条件＞    ::=  ＜表达式＞＜关系运算符＞＜表达式＞｜＜表达式＞ //表达式为0条件为假，否则为真
＜循环语句＞   ::=  while '('＜条件＞')'＜语句＞| do＜语句＞while '('＜条件＞')' |for'('＜标识符＞＝＜表达式＞;＜条件＞;＜标识符＞＝＜标识符＞(+|-)＜步长＞')'＜语句＞
＜步长＞::= ＜无符号整数＞  
＜有返回值函数调用语句＞ ::= ＜标识符＞'('＜值参数表＞')'
＜无返回值函数调用语句＞ ::= ＜标识符＞'('＜值参数表＞')'
＜值参数表＞   ::= ＜表达式＞{,＜表达式＞}｜＜空＞
＜语句列＞   ::= ｛＜语句＞｝
＜读语句＞    ::=  scanf '('＜标识符＞{,＜标识符＞}')'
＜写语句＞    ::= printf '(' ＜字符串＞,＜表达式＞ ')'| printf '('＜字符串＞ ')'| printf '('＜表达式＞')'
＜返回语句＞   ::=  return['('＜表达式＞')'] 

 */

/*
func_declare: var1 函数名 						int/char/void 函数名()
para/var_declare: var1
add,sub,mul,div: result = var1 op var2 			#3 = #1 op #2  			eg: add $t9,$t9,$t8
neg: result = -var1            					#1 = -#2
my_assign: result = var1 						#1 = b
assign: var1 = var2 							b = #1
arr_assign: var1[var2] = result					a[#1] = #2
arr_take: result = var1[var2]					#1 = a[#2]
output_str: var1
output: var1
output_c: var1
input:  var1
call: call var1()
push: push var1									push #1
ret:  #ret var1									#ret #1
receive: result = #ret							#1 = #ret
set_label:  var1:
_goto: goto var1
beq,bne,bgt,bge,blt,ble: var1,var2,result		bne #1 #2 labeli
beqz,bnez: var1,result							bnez #1 labeli
addi,subi: result,var1,var2
*/
/*
错误类型			错误类别码
非法符号或不符合词法	a
名字重定义	b
未定义的名字	c
函数参数个数不匹配	d
函数参数类型不匹配	e
条件判断中出现不合法的类型	f
无返回值的函数存在不匹配的return语句	g
有返回值的函数缺少return语句或存在不匹配的return语句	h
数组元素的下标只能是整型表达式	i
不能改变常量的值	j
应为分号	k
应为右小括号’)’	l
应为右中括号’]’	m
do-while应为语句中缺少while		n
常量定义中=后面只能是整型或字符型常量	o
*/
