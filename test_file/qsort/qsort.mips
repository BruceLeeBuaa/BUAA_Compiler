.data
str$0: .asciiz "\n"

.text
jal main
li $v0, 10
syscall

Qsort:
# $a0 : Qsort_low
# $a1 : Qsort_high
# $s6 : judge1_c
# $s5 : judge1_d
# $s1 : judge1_ret
# $s6 : judge2_c
# $s5 : judge2_d
# $s1 : judge2_ret
# $s3 : Qsort_first
# $s4 : Qsort_last
# $s2 : Qsort_key
# $s0 : Qsort_#1
# $s1 : Qsort_#2
# $s0 : Qsort_#4
# $s0 : Qsort_#5
# $s1 : Qsort_#6
# $s0 : Qsort_#8
# $s0 : Qsort_#9
# $s0 : Qsort_#10
# $s0 : Qsort_#11
sub $sp, $sp, 180
sw $s0, 96($sp)
sw $s1, 100($sp)
sw $s2, 104($sp)
sw $s3, 108($sp)
sw $s4, 112($sp)
sw $s5, 116($sp)
sw $s6, 120($sp)

# Qsort_first = Qsort_low:
move $s3, $a0

# Qsort_last = Qsort_high:
move $s4, $a1

# Qsort_#1 = global_sort[Qsort_low]:
sll $t8, $a0, 2
add $t8, $t8, $gp
lw $s0, 0($t8)

# Qsort_key = Qsort_#1:
move $s2, $s0

# if Qsort_low < Qsort_high branch to "label$5":
blt $a0, $a1, label$5

# return:
lw $s0, 96($sp)
lw $s1, 100($sp)
lw $s2, 104($sp)
lw $s3, 108($sp)
lw $s4, 112($sp)
lw $s5, 116($sp)
lw $s6, 120($sp)
add $sp, $sp, 180
jr $ra

# label$5::
label$5:

# if Qsort_first >= Qsort_last branch to "label$6":
bge $s3, $s4, label$6

# label$7::
label$7:

# Qsort_#2 = global_sort[Qsort_last]:
sll $t8, $s4, 2
add $t8, $t8, $gp
lw $s1, 0($t8)

# judge1_c = Qsort_#2:
move $s6, $s1

# judge1_d = Qsort_key:
move $s5, $s2

# judge1_ret = global_int$0:
move $s1, $zero

# if Qsort_first >= Qsort_last branch to "label$18":
bge $s3, $s4, label$18

# if judge1_c < judge1_d branch to "label$19":
blt $s6, $s5, label$19

# judge1_ret = global_int$1:
li $s1, 1

# label$19::
label$19:

# label$18::
label$18:

# if judge1_ret != global_int$1 branch to "label$8":
bne $s1, 1, label$8

# label$9::
label$9:

# Qsort_#4 = Qsort_last - global_int$1:
sub $s0, $s4, 1

# Qsort_last = Qsort_#4:
move $s4, $s0

# Qsort_#2 = global_sort[Qsort_#4]:
sll $t8, $s0, 2
add $t8, $t8, $gp
lw $s1, 0($t8)

# judge1_c = Qsort_#2:
move $s6, $s1

# judge1_d = Qsort_key:
move $s5, $s2

# judge1_ret = global_int$0:
move $s1, $zero

# if Qsort_first >= Qsort_#4 branch to "label$21":
bge $s3, $s0, label$21

# if judge1_c < judge1_d branch to "label$22":
blt $s6, $s5, label$22

# judge1_ret = global_int$1:
li $s1, 1

# label$22::
label$22:

# label$21::
label$21:

# if judge1_ret == global_int$1 branch to "label$9":
beq $s1, 1, label$9

# label$8::
label$8:

# Qsort_#5 = global_sort[Qsort_last]:
sll $t8, $s4, 2
add $t8, $t8, $gp
lw $s0, 0($t8)

# global_sort[Qsort_first] = Qsort_#5:
sll $t8, $s3, 2
add $t8, $t8, $gp
sw $s0, 0($t8)

# Qsort_#6 = global_sort[Qsort_first]:
sll $t8, $s3, 2
add $t8, $t8, $gp
lw $s1, 0($t8)

# judge2_c = Qsort_#6:
move $s6, $s1

# judge2_d = Qsort_key:
move $s5, $s2

# judge2_ret = global_int$0:
move $s1, $zero

# if Qsort_first >= Qsort_last branch to "label$24":
bge $s3, $s4, label$24

# if judge2_c > judge2_d branch to "label$25":
bgt $s6, $s5, label$25

# judge2_ret = global_int$1:
li $s1, 1

# label$25::
label$25:

# label$24::
label$24:

# if judge2_ret != global_int$1 branch to "label$10":
bne $s1, 1, label$10

# label$11::
label$11:

# Qsort_#8 = Qsort_first + global_int$1:
add $s0, $s3, 1

# Qsort_first = Qsort_#8:
move $s3, $s0

# Qsort_#6 = global_sort[Qsort_#8]:
sll $t8, $s0, 2
add $t8, $t8, $gp
lw $s1, 0($t8)

# judge2_c = Qsort_#6:
move $s6, $s1

# judge2_d = Qsort_key:
move $s5, $s2

# judge2_ret = global_int$0:
move $s1, $zero

# if Qsort_#8 >= Qsort_last branch to "label$27":
bge $s0, $s4, label$27

# if judge2_c > judge2_d branch to "label$28":
bgt $s6, $s5, label$28

# judge2_ret = global_int$1:
li $s1, 1

# label$28::
label$28:

# label$27::
label$27:

# if judge2_ret == global_int$1 branch to "label$11":
beq $s1, 1, label$11

# label$10::
label$10:

# Qsort_#9 = global_sort[Qsort_first]:
sll $t8, $s3, 2
add $t8, $t8, $gp
lw $s0, 0($t8)

# global_sort[Qsort_last] = Qsort_#9:
sll $t8, $s4, 2
add $t8, $t8, $gp
sw $s0, 0($t8)

# if Qsort_first < Qsort_last branch to "label$7":
blt $s3, $s4, label$7

# label$6::
label$6:

# global_sort[Qsort_first] = Qsort_key:
sll $t8, $s3, 2
add $t8, $t8, $gp
sw $s2, 0($t8)

# Qsort_#10 = Qsort_first - global_int$1:
sub $s0, $s3, 1

# <!-- call block begin -->:
sw $a0, 164($sp)
sw $a1, 168($sp)
sw $ra, 160($sp)
lw $a0, 164($sp)
move $a1, $s0
jal Qsort
lw $ra, 160($sp)
lw $a0, 164($sp)
lw $a1, 168($sp)
# <!-- call block end -->:

# Qsort_#11 = Qsort_first + global_int$1:
add $s0, $s3, 1

# <!-- call block begin -->:
sw $a0, 164($sp)
sw $a1, 168($sp)
sw $ra, 160($sp)
move $a0, $s0
lw $a1, 168($sp)
jal Qsort
lw $ra, 160($sp)
lw $a0, 164($sp)
lw $a1, 168($sp)
# <!-- call block end -->:

# return:
lw $s0, 96($sp)
lw $s1, 100($sp)
lw $s2, 104($sp)
lw $s3, 108($sp)
lw $s4, 112($sp)
lw $s5, 116($sp)
lw $s6, 120($sp)
add $sp, $sp, 180
jr $ra

main:
# $s1 : testRecursion_i
# $s0 : testRecursion_#12
# $s0 : testRecursion_#13
sub $sp, $sp, 96
sw $s0, 12($sp)
sw $s1, 16($sp)

# global_sort[global_int$0] = global_int$5:
sll $t8, $zero, 2
li $t9, 5
add $t8, $t8, $gp
sw $t9, 0($t8)

# global_sort[global_int$1] = global_int$8:
li $t9, 8
sw $t9, 4($gp)

# global_sort[global_int$2] = global_int$3:
li $t9, 3
sw $t9, 8($gp)

# global_sort[global_int$3] = global_int$6:
li $t9, 6
sw $t9, 12($gp)

# global_sort[global_int$4] = global_int$4:
li $t9, 4
sw $t9, 16($gp)

# global_sort[global_int$5] = global_int$1:
li $t9, 1
sw $t9, 20($gp)

# global_sort[global_int$6] = global_int$2:
li $t9, 2
sw $t9, 24($gp)

# global_sort[global_int$7] = global_int$7:
li $t9, 7
sw $t9, 28($gp)

# <!-- call block begin -->:
sw $ra, 76($sp)
move $a0, $zero
li $a1, 7
jal Qsort
lw $ra, 76($sp)
# <!-- call block end -->:

# testRecursion_i = global_int$0:
move $s1, $zero

# label$16::
label$16:

# testRecursion_#12 = global_sort[testRecursion_i]:
sll $t8, $s1, 2
add $t8, $t8, $gp
lw $s0, 0($t8)

# output testRecursion_#12:
move $t8, $a0
move $a0, $s0
li $v0, 1
syscall
move $a0, $t8

# output "\n" :
move $t8, $a0
la $a0, str$0
li $v0, 4
syscall
move $a0, $t8

# testRecursion_#13 = testRecursion_i + global_int$1:
add $s0, $s1, 1

# testRecursion_i = testRecursion_#13:
move $s1, $s0

# if testRecursion_#13 < global_int$8 branch to "label$16":
blt $s0, 8, label$16

# return:
lw $s0, 12($sp)
lw $s1, 16($sp)
add $sp, $sp, 96
jr $ra
